import pyfirmata
import time
import numpy as np

def board_initializer(port=None):
    '''
    Initializes connection with Arduino board.
    Parameters:
        port (string): Location of the port which Arduino is plugged into
            Default Value: None    Triggers request for user to input port manually
    Returns:
        Arduino board object
    '''
    if port == None:
        port = input('What is the port?')
    
    pyboard = pyfirmata.Arduino(port)
    return pyboard

def LED_setup(pyboard, file):
    '''
    Reads the setup file to return a dictionary representing the ports in use on the Arduino board.
    Parameters:
        pyboard (board object): Arduino board object containing pins described in setup file
        file (numpy array): ND array containing the contents of the setup file
    Returns:
        Dictionary representing the LEDs and their connections to the Arduino board
            Keys are ints corresponding to LEDs; each LED is assigned an int key
            Values are 1D lists containing Arduino pin objects on the board in the form [anode_pin, cathode_pin]
    '''
    # Reading the initializing txt file to save which rows/cols correspond to which pins & which are anodes
    rows = {}; cols = {}
    for pin in file:
        if pin[1] != 0:
            rows[pin[1]] = [pyboard.digital[int(pin[0])], pin[3]]
        else:
            cols[pin[2]] = [pyboard.digital[int(pin[0])], pin[3]]
    
    # Setting up LED_array
    LED_counter = 0
    LED_array = {}
    while LED_counter < len(rows) * len(cols):
        LED_counter += 1
        c = LED_counter % len(cols)
        if c == 0:
            c += len(cols)
        r = int(np.ceil(LED_counter / len(cols)))
        r_pin = rows[r]
        c_pin = cols[c]
        
        if r_pin[1] == c_pin[1]:
            # This means both row and col are labeled as anodes
            print("ERROR!!!")
        if c_pin[1] == 1:
            # This sets the LED to be [col, row] as [anode, cathode]
            LED_array[LED_counter] = [c_pin[0], r_pin[0]]
        else:
            # This sets LED to be [row, col] as [anode, cathode] (default setting)
            LED_array[LED_counter] = [r_pin[0], c_pin[0]]
        
    return LED_array

def global_off(LED_array):
    '''
    Sets all pins to their default off positions by looping over a dictionary of LED connections.
    Turns all LEDs' pins to write mode (1), sets pins to low V (write(0)), turns pins to read mode (0).
    Parameters:
        LED_array (dictionary): Represents the LEDs and their connections to the Arduino board
            Keys are ints corresponding to LEDs; each LED is assigned an int key
            Values are 1D lists containing Arduino pin objects on the board in the form [anode_pin, cathode_pin]
    Returns:
        None
    '''
    for LED_num in LED_array:
        anode = LED_array[LED_num][0]
        if anode.mode != 1:
            anode.mode = 1   # Write mode
        anode.write(0)       # Low V
        anode.mode = 0       # Read mode
        
        cathode = LED_array[LED_num][1]
        if cathode.mode != 1:
            cathode.mode = 1 # Write mode
        cathode.write(0)     # Low V
        cathode.mode = 0     # Read mode
        
def global_on(LED_array, read=True):
    '''
    Sets all pins to the on position by looping over a dictionary of LED connections.
    Turns all LEDs' pins to write mode (1), sets pins to high V (write(0)).
    Parameters:
        LED_array (dictionary): Represents the LEDs and their connections to the Arduino board
            Keys are ints corresponding to LEDs; each LED is assigned an int key
            Values are 1D lists containing Arduino pin objects on the board in the form [anode_pin, cathode_pin]
        read (boolean): If True, after the main part of the function runs, all pins turn to read mode (0). If False, no effect.
            Default Value: True
    Returns:
        None
    '''
    
    for LED_num in LED_array:
        anode = LED_array[LED_num][0]
        if anode.mode != 1:
            anode.mode = 1   # Write mode
        anode.write(1)       # High V
        
        cathode = LED_array[LED_num][1]
        if cathode.mode != 1:
            cathode.mode = 1 # Write mode
        cathode.write(1)     # High V
        
        if read:
            anode.mode = 0   # Read mode
            cathode.mode = 0 # Read mode
    
def flash(LED_array, LED_num, num_flashes, half_flash_length=0.5):
    '''
    Flashes an individual LED in on-off cycles. In one on-off cycle:
        Turns on individual LED by setting anode/cathode both to mode 1 (write) with low/high V, respectively.
        Waits a specified length of time.
        Turns off individual LED by setting anode/cathode both to low V, then both to mode 0 (read).
        Waits the same specified length of time.
    Parameters:
        LED_array (dictionary): Represents the LEDs and their connections to the Arduino board
            Keys are ints corresponding to LEDs; each LED is assigned an int key
            Values are 1D lists containing Arduino pin objects on the board in the form [anode_pin, cathode_pin]
        LED_num (int): Key of LED in LED_array which should flash
        num_flashes (int): Number of times to flash LED (number of on-off cycles)
        half_flash_length (float): Specified time (in sec) LED is turned on/off for (half-period of flash)
            Default Value: 0.5    Corresponds to 1 second period of flash
    Returns:
        None
    '''
    # Retrieving anode and cathode
    [anode, cathode] = LED_array[LED_num]
    
    # Flashing the LED
    for repetition in range(num_flashes):
        # Turning the LED on
        anode.mode = 1
        cathode.mode = 1
        cathode.write(1)
        time.sleep(half_flash_length)
        
        # Turning the LED off
        cathode.write(0)
        cathode.mode = 0
        anode.mode = 0
        time.sleep(half_flash_length)

def pwm(LED_array, LED_num, V_apparent, duration=1.):
    '''
    Does PWM on an LED. Sets anode to mode 1 (write) at low V, sets cathode to mode 3 (PWM) at V_apparent.
    Delays a specified amount of time, sets cathode to low V, sets both cathode/anode to mode 0 (read) for default conditions.
    Parameters:
        LED_array (dictionary): Represents the LEDs and their connections to the Arduino board
            Keys are ints corresponding to LEDs; each LED is assigned an int key
            Values are 1D lists containing Arduino pin objects on the board in the form [anode_pin, cathode_pin]
        LED_num (int): Key of LED in LED_array which should do PWM
        V_apparent (float): Apparent voltage of LED from PWM
            Must be between 0 (inclusive) and 5 (inclusive)
        duration (float): Time (in seconds) that the LED should do PWM for
            Default Value: 1.    Corresponds to 1 second of PWM.
    Returns:
        None
    '''
    # Retrieving anode and cathode
    [anode, cathode] = LED_array[LED_num]
    
    # Turning the LED on
    anode.mode = 1
    anode.write(0)
    cathode.mode = 3
    cathode.write(V_apparent)
    time.sleep(duration)
    
    # Turning the LED off
    cathode.write(0)
    cathode.mode = 0
    anode.mode = 0
