import pyfirmata
import time
import numpy as np

def starter():
    '''    
    Initializes connection with the Arduino board in port. Returns the board connection.
    '''
    
    pyboard = pyfirmata.Arduino(input('What is the port?'))
    time.sleep(1)
    return pyboard

def LED_setup(pyboard, file):
    '''
    param Arduino pyboard: Connection with the Arduino board.
    param ndarray file: Contents of the setup file fed from main as ndarray.
    
    Initializes the LED setup as dict LED_array.
    LED_array has key=LED_num (int corresponding to a given LED) and value=[anode, cathode].
    Returns LED_pins, which is a version of LED_array with literal pins instead of pin numbers for anode and cathode.
    '''
    
    # Reading the initializing txt file to save which rows/cols correspond to which pins & which are anodes
    rows = {}; cols = {}
    for pin in file:
        if pin[1] != 0:
            rows[pin[1]] = [int(pin[0]), int(pin[3])]
        else:
            cols[pin[2]] = [int(pin[0]), int(pin[3])]
    
    # Setting up LED_array
    LED_counter = 0
    LED_array = {}
    while LED_counter < len(rows) * len(cols):
        LED_counter += 1
        c = LED_counter % len(cols)
        if c == 0:
            c += len(cols)
        r = int(np.ceil(LED_counter / len(cols)))
        r_pin = rows[r]
        c_pin = cols[c]
        
        if r_pin[1] == c_pin[1]:
            # This means both row and col are labeled as anodes
            print("ERROR!!!")
        if c_pin[1] == 1:
            # This sets the LED to be [col, row] as [anode, cathode]
            LED_array[LED_counter] = [c_pin[0], r_pin[0]]
        else:
            # This sets LED to be [row, col] as [anode, cathode] (default setting)
            LED_array[LED_counter] = [r_pin[0], c_pin[0]]
    
    # Converting pin names to literal pins
    LED_pins = {}
    for LED_name in LED_array:
        [anode_num, cathode_num] = LED_array[LED_name]
        LED_pins[LED_name] = [pyboard.digital[anode_num], pyboard.digital[cathode_num]]
    return LED_pins

def global_off(LED_array):
    '''
    param dict LED_array: key=int corresponding to an LED, value=[anode_pin, cathode_pin]
    
    Sets anodes to mode 3 (PWM), writes 0 for 0 V, then sets anodes to mode 0 (read).
    Sets cathodes to mode 1 (write), writes 0 for 0 V, then sets cathodes to mode 0 (read).
    Loops over all LEDs in LED_array to do so.
    '''
    
    for LED_name in LED_array:
        [anode, cathode] = LED_array[LED_name]
        anode.mode = 3
        anode.write(0)
        anode.mode = 0
        cathode.mode = 1
        cathode.write(0)
        cathode.mode = 0

def global_on(LED_array):
    '''
    param dict LED_array: key=int corresponding to an LED, value=[anode_pin, cathode_pin]
    
    Sets anodes to mode 3 (PWM), writes 1 for 5 V, then sets anodes to mode 0 (read).
    Sets cathodes to mode 1 (write), writes 1 for 5 V, then sets cathodes to mode 0 (read).
    Loops over all LEDs in LED_array to do so.
    This is the default setting for the LED array.
    '''
    
    for LED_name in LED_array:
        [anode, cathode] = LED_array[LED_name]
        anode.mode = 3
        anode.write(1)
        anode.mode = 0
        cathode.mode = 1
        cathode.write(1)
        cathode.mode = 0

def PWM(LED_array, LED_num, duty_cycle, time_length):
    '''
    param dict LED_array: key=int corresponding to an LED, value=[anode_pin, cathode_pin]
    param int LED_num: Number corresponding to the LED that should flash
    param float duty_cycle: Decimal between 0 and 1 (inclusive) representing coefficient c in equation
                            apparent voltage = 5 * c for PWM
    param float time_length: Time in sec for PWM to last
    
    Does PWM on LED in LED_array corresponding to LED_num with apparent voltage duty_cycle for time_length seconds.
    '''
    
    # Retrieving anode and cathode
    [anode, cathode] = LED_array[LED_num]
    
    # Beginning PWM
    cathode.mode = 1
    cathode.write(1)
    anode.mode = 3
    anode.write(duty_cycle)
    time.sleep(time_length)
    
    # Ending PWM
    anode.write(1)
    anode.mode = 0
    cathode.mode = 0

board = starter()
file = np.loadtxt('/Users/logan-hanssler/Documents/Python Code for Arduino/PWM Data', skiprows=5)
LEDs = LED_setup(board, file)
global_on(LEDs)

while True:
    # Turns on LED corresponding to number given for PWM with duty_cycle_input brightness for time_length_input seconds
    LED_num_input = int(input('Which LED would you like to turn on?'))
    duty_cycle_input = int(input('What brightness would you like? Enter an integer 0 - 255.'))
    time_length_input = float(input('How many seconds would you like the LED to turn on for?'))
    PWM(LEDs, LED_num_input, duty_cycle_input, time_length_input)
